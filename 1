apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    k8s-app: elasticsearch
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Elasticsearch"
spec:
  selector:
    k8s-app: elasticsearch
  ports:
    - port: 9200
      name: db
      protocol: TCP 
      targetPort: db
    - port: 9300
      name: inter
---
# RBAC 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    k8s-app: elasticsearch
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole 
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elasticsearch 
  namespace: logging
  labels: 
    k8s-app: elasticsearch
    kubernetes.io/cluster-service: "true" 
    addonmanager.kubernetes.io/mode: Reconcile 
rules:
- apiGroups:
  - ""
  resources:
  - "service"
  - "namespace"
  - "endpoints"
  verbs:
  - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: logging
  name: elasticsearch
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true" 
    addonmanager.kubernetes.io/mode: Reconcile 
subjects:
- kind: ServiceAccount
  name: elasticsearch
  namespace: logging
  apiGroups: ""
roleRef:
  kind: ClusterRole
  name: elasticsearch
  apiGroups: ""
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true" 
    addonmanager.kubernetes.io/mode: Reconcile 
    srv: srv-elasticsearch
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      k8s-app: elasticsearch
  template: 
    metadata:
      labels: 
        k8s-app: elasticsearch 
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: elasticsearch
      containers: 
      - image: docker.io/library/elasticsearch:7.9.3
        name: elasticsearch
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 500Mi
        ports:
        - containerPort: 9200
          name: db
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/data/
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace 
        - name: "discovery.type"
          value: "single-node"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx2g"
      volumes:
      - name: elasticsearch
        hostPath:
          path: /data/es/
      nodeSelector:
        es: node1
      tolerations:
      - effect: NoSchedule
        operator: Exists
      initContainers:
      - name: elasticsearch
        image: alpine:3.6
        command: ["/sbin/sysctl", "-w","vm.max_map_count=262144"]
        securityContext:
          privileged: true 
      - name: increase-fd-ulimit
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c","ulimit -n 65536"]
        securityContext:
          privileged: true 
      - name: elasticsearch-volume-init 
        image: alpine:3.6
        command: 
          - chmod
          - -R
          - "777" 
          - /usr/share/elasticsearch/data 
        volumeMounts:
        - name: elasticsearch
          mountPath: /usr/share/elasticsearch/data/

        

